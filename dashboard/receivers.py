from typing import Any, Optional

from django.contrib import messages
from django.contrib.auth import get_user_model
from django.db.models.signals import post_save
from django.dispatch import receiver

# –ö–∞—Å—Ç–æ–º–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ —Ü—å–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
from .custom_signals import file_uploaded, text_analyzed


# ---------- –ö–∞—Å—Ç–æ–º–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ dashboard ----------

@receiver(file_uploaded)
def on_file_uploaded(sender: Any, request: Optional[Any] = None, filename: str = "", size: int = 0, **kwargs):
    """
    –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: –ª–æ–≥ + —Ñ–ª–µ—à-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —î request.
    """
    print(f"[signal] file_uploaded: {filename} ({size} bytes)")
    try:
        if request is not None:
            messages.info(request, f"–°–∏–≥–Ω–∞–ª —Å–ø—Ä–∞—Ü—é–≤–∞–≤ üì°: ¬´{filename}¬ª ({size} –±–∞–π—Ç)")
    except Exception:
        # messages –º–æ–∂—É—Ç—å –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –Ω–µ—Ç–∏–ø–æ–≤–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö (—Ç–µ—Å—Ç–∏/CLI)
        pass


@receiver(text_analyzed)
def on_text_analyzed(
    sender: Any,
    request: Optional[Any] = None,
    words: int = 0,
    chars: int = 0,
    sample: str = "",
    **kwargs,
):
    """
    –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∞–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É: –ª–æ–≥ + —Ñ–ª–µ—à-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–±—É–¥–µ –≤–∏–¥–Ω–æ –ø—ñ—Å–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ HTTP-–∑–∞–ø–∏—Ç—É).
    """
    print(f"[signal] text_analyzed: words={words}, chars={chars}, sample={sample!r}")
    try:
        if request is not None:
            messages.info(request, f"–ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É: {words} —Å–ª—ñ–≤, {chars} —Å–∏–º–≤–æ–ª—ñ–≤")
    except Exception:
        pass


# ---------- –ê–≤—Ç–æ-—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è DRF —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ----------

try:
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—É—Ç, —â–æ–± —Ñ–∞–π–ª –∑–∞–ª–∏—à–∞–≤—Å—è –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–∏–º –Ω–∞–≤—ñ—Ç—å –±–µ–∑ rest_framework.authtoken —É INSTALLED_APPS
    from rest_framework.authtoken.models import Token  # type: ignore
except Exception:
    Token = None  # type: ignore[misc]


@receiver(post_save, sender=get_user_model())
def create_auth_token_for_new_user(sender, instance, created: bool, **kwargs):
    """
    –ü—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî –≤–∏–¥–∞—Ç–∏/–∑–Ω–∞–π—Ç–∏ DRF Token.
    –ü—Ä–∞—Ü—é—î, —è–∫—â–æ 'rest_framework.authtoken' —î –≤ INSTALLED_APPS (—É –Ω–∞—Å —î).
    """
    if not created or Token is None:
        return
    # get_or_create –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤/–º—ñ–≥—Ä–∞—Ü—ñ–π
    Token.objects.get_or_create(user=instance)
