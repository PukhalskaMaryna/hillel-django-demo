# dashboard/views.py
from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.conf import settings
from django.contrib import messages

from pathlib import Path
import os
import shutil
import json

from .custom_signals import file_uploaded, text_analyzed


def home(request):
    """
    –ì–æ–ª–æ–≤–Ω–∞ –¥–∞—à–±–æ—Ä–¥–∞. –ú–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω:
    templates/dashboard/home.html
    (–∞–±–æ –ª–∏—à–∏—Ç–∏ hello.html ‚Äî —Ç–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è —Ç—É—Ç)
    """
    # –Ø–∫—â–æ –≤–∂–µ –º–∞—î—à hello.html ‚Äî –º–æ–∂–µ—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –π–æ–≥–æ:
    # return render(request, "dashboard/hello.html", {"title": "Dashboard"})
    return render(request, "dashboard/home.html", {"title": "Dashboard"})


def api_ping(request):
    """–ü—Ä–æ—Å—Ç–∏–π healthcheck."""
    return JsonResponse({"status": "ok", "app": "dashboard"})


@require_POST
def api_echo(request):
    """
    –ü—Ä–∏–π–º–∞—î JSON {"text": "..."} ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î {"original": "...", "upper": "..."}.
    –î–æ–¥–∞—Ç–∫–æ–≤–æ —à–ª–µ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å–∏–≥–Ω–∞–ª text_analyzed –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ç–µ–∫—Å—Ç—É.
    """
    try:
        data = json.loads((request.body or b"{}").decode("utf-8"))
    except json.JSONDecodeError:
        return JsonResponse({"error": "invalid json"}, status=400)

    text = data.get("text", "")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å–∏–≥–Ω–∞–ª —ñ–∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    word_count = len(text.split())
    char_count = len(text)
    text_analyzed.send(
        sender=api_echo.__class__,
        request=request,
        words=word_count,
        chars=char_count,
        sample=text[:30],
    )

    return JsonResponse({"original": text, "upper": text.upper()})


def files_page(request):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ media/uploads —Ç–∞ –∫–æ–ø—ñ—è –≤ media/backup.
    –ü—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É: —à–ª–µ–º–æ —Å–∏–≥–Ω–∞–ª file_uploaded —ñ –ø–æ–∫–∞–∑—É—î–º–æ Django messages.
    """
    uploads_dir = Path(settings.MEDIA_ROOT) / "uploads"
    backups_dir = Path(settings.MEDIA_ROOT) / "backup"
    uploads_dir.mkdir(parents=True, exist_ok=True)
    backups_dir.mkdir(parents=True, exist_ok=True)

    if request.method == "POST":
        f = request.FILES.get("file")
        if not f:
            messages.error(request, "–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ üôà")
            return redirect("dashboard:files")

        try:
            # –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            dest = uploads_dir / f.name
            with dest.open("wb+") as out:
                for chunk in f.chunks():
                    out.write(chunk)

            # —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–ø—ñ—é –≤ backup/
            shutil.copy2(dest, backups_dir / f.name)

            # –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å–∏–≥–Ω–∞–ª (–º–æ–∂–Ω–∞ –ª–æ–≤–∏—Ç–∏ —É receivers.py)
            file_uploaded.send(
                sender=files_page.__class__,
                request=request,
                filename=f.name,
                size=dest.stat().st_size,
            )

            messages.success(request, f"¬´{f.name}¬ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ‚úÖ –ö–æ–ø—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É backup/")
        except Exception as e:
            messages.error(request, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {e}")

        # PRG: –ø—ñ—Å–ª—è POST ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ refresh
        return redirect("dashboard:files")

    # GET: –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª—ñ–≤
    def list_dir(path: Path):
        items = []
        if path.exists():
            for name in os.listdir(path):
                p = path / name
                if p.is_file():
                    rel = p.relative_to(settings.MEDIA_ROOT).as_posix()
                    items.append(
                        {
                            "name": name,
                            "size": p.stat().st_size,
                            "url": settings.MEDIA_URL + rel,
                        }
                    )
        return items

    context = {
        "uploads": list_dir(uploads_dir),
        "backups": list_dir(backups_dir),
    }
    return render(request, "dashboard/files.html", context)
